{"ast":null,"code":"import axios from 'axios';\n// Создаем экземпляр axios с базовой конфигурацией\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3001/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Интерцептор для обработки ошибок\napi.interceptors.response.use(response => response, error => {\n  var _error$response, _error$response2, _error$response3;\n  console.error('API Error:', error);\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 404) {\n    throw new Error('Ресурс не найден');\n  } else if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 400) {\n    var _error$response$data;\n    throw new Error(((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Неверные данные');\n  } else if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) >= 500) {\n    throw new Error('Ошибка сервера. Попробуйте позже');\n  } else if (error.code === 'ECONNABORTED') {\n    throw new Error('Превышено время ожидания');\n  } else if (error.message === 'Network Error') {\n    throw new Error('Ошибка сети. Проверьте подключение');\n  }\n  throw error;\n});\n\n// API для работы с животными\nexport const animalsApi = {\n  // Получить всех животных\n  getAll: () => api.get('/animals'),\n  // Получить животное по ID\n  getById: id => api.get(`/animals/${id}`),\n  // Создать новое животное\n  create: data => api.post('/animals', data),\n  // Обновить животное\n  update: (id, data) => api.put(`/animals/${id}`, data),\n  // Удалить животное\n  delete: id => api.delete(`/animals/${id}`),\n  // Рассчитать энергетическую потребность для животного\n  calculateEnergy: id => api.post(`/animals/${id}/calculate-energy`)\n};\n\n// API для работы с кормами\nexport const feedsApi = {\n  // Получить все корма с фильтрацией\n  getAll: params => api.get('/feeds', {\n    params\n  }),\n  // Получить список брендов\n  getBrands: () => api.get('/feeds/brands'),\n  // Получить корм по ID\n  getById: id => api.get(`/feeds/${id}`),\n  // Создать новый корм\n  create: data => api.post('/feeds', data),\n  // Обновить корм\n  update: (id, data) => api.put(`/feeds/${id}`, data),\n  // Удалить корм\n  delete: id => api.delete(`/feeds/${id}`),\n  // Получить корма для сравнения\n  getForComparison: feedIds => api.post('/feeds/compare', {\n    feedIds\n  }),\n  // Получить статистику по кормам\n  getStats: () => api.get('/feeds/stats/overview')\n};\n\n// API для расчетов\nexport const calculationsApi = {\n  // Рассчитать энергетическую потребность\n  calculateEnergyRequirement: data => api.post('/calculations/energy-requirement', data),\n  // Сравнить корма для животного (с сохранением)\n  compareFeeds: data => api.post('/calculations/compare-feeds', data),\n  // Быстрое сравнение кормов (без сохранения животного)\n  compareFeedsQuick: data => api.post('/calculations/compare-feeds-quick', data),\n  // Получить историю сравнений для животного\n  getComparisonsForAnimal: (animalId, params) => api.get(`/calculations/comparisons/animal/${animalId}`, {\n    params\n  }),\n  // Получить конкретное сравнение по ID\n  getComparison: id => api.get(`/calculations/comparisons/${id}`),\n  // Рассчитать суточную норму корма\n  calculateDailyAmount: data => api.post('/calculations/daily-amount', data),\n  // Рассчитать питательные вещества в суточной норме\n  calculateDailyNutrients: data => api.post('/calculations/daily-nutrients', data),\n  // Получить статистику расчетов\n  getStats: () => api.get('/calculations/stats')\n};\n\n// API для проверки здоровья сервера\nexport const healthApi = {\n  check: () => api.get('/health')\n};\n\n// Экспортируем основной экземпляр API\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","response","use","error","_error$response","_error$response2","_error$response3","console","status","Error","_error$response$data","data","code","message","animalsApi","getAll","get","getById","id","post","update","put","delete","calculateEnergy","feedsApi","params","getBrands","getForComparison","feedIds","getStats","calculationsApi","calculateEnergyRequirement","compareFeeds","compareFeedsQuick","getComparisonsForAnimal","animalId","getComparison","calculateDailyAmount","calculateDailyNutrients","healthApi","check"],"sources":["/Users/pavelgalante/VetFormuLab/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport {\n  Animal,\n  CreateAnimalRequest,\n  Feed,\n  CreateFeedRequest,\n  FeedComparison,\n  EnergyRequirementRequest,\n  EnergyRequirementResponse,\n  CompareFeedsRequest,\n  Comparison,\n  FeedStats,\n  CalculationStats,\n} from '../types';\n\n// Создаем экземпляр axios с базовой конфигурацией\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3001/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Интерцептор для обработки ошибок\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('API Error:', error);\n    \n    if (error.response?.status === 404) {\n      throw new Error('Ресурс не найден');\n    } else if (error.response?.status === 400) {\n      throw new Error(error.response.data?.error || 'Неверные данные');\n    } else if (error.response?.status >= 500) {\n      throw new Error('Ошибка сервера. Попробуйте позже');\n    } else if (error.code === 'ECONNABORTED') {\n      throw new Error('Превышено время ожидания');\n    } else if (error.message === 'Network Error') {\n      throw new Error('Ошибка сети. Проверьте подключение');\n    }\n    \n    throw error;\n  }\n);\n\n// API для работы с животными\nexport const animalsApi = {\n  // Получить всех животных\n  getAll: (): Promise<AxiosResponse<Animal[]>> =>\n    api.get('/animals'),\n\n  // Получить животное по ID\n  getById: (id: number): Promise<AxiosResponse<Animal>> =>\n    api.get(`/animals/${id}`),\n\n  // Создать новое животное\n  create: (data: CreateAnimalRequest): Promise<AxiosResponse<Animal>> =>\n    api.post('/animals', data),\n\n  // Обновить животное\n  update: (id: number, data: Partial<CreateAnimalRequest>): Promise<AxiosResponse<Animal>> =>\n    api.put(`/animals/${id}`, data),\n\n  // Удалить животное\n  delete: (id: number): Promise<AxiosResponse<{ message: string }>> =>\n    api.delete(`/animals/${id}`),\n\n  // Рассчитать энергетическую потребность для животного\n  calculateEnergy: (id: number): Promise<AxiosResponse<{ animal_id: number; metabolic_energy_need: number; message: string }>> =>\n    api.post(`/animals/${id}/calculate-energy`),\n};\n\n// API для работы с кормами\nexport const feedsApi = {\n  // Получить все корма с фильтрацией\n  getAll: (params?: {\n    search?: string;\n    type?: string;\n    brand?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<AxiosResponse<Feed[]>> =>\n    api.get('/feeds', { params }),\n\n  // Получить список брендов\n  getBrands: (): Promise<AxiosResponse<string[]>> =>\n    api.get('/feeds/brands'),\n\n  // Получить корм по ID\n  getById: (id: number): Promise<AxiosResponse<Feed>> =>\n    api.get(`/feeds/${id}`),\n\n  // Создать новый корм\n  create: (data: CreateFeedRequest): Promise<AxiosResponse<Feed>> =>\n    api.post('/feeds', data),\n\n  // Обновить корм\n  update: (id: number, data: Partial<CreateFeedRequest>): Promise<AxiosResponse<Feed>> =>\n    api.put(`/feeds/${id}`, data),\n\n  // Удалить корм\n  delete: (id: number): Promise<AxiosResponse<{ message: string }>> =>\n    api.delete(`/feeds/${id}`),\n\n  // Получить корма для сравнения\n  getForComparison: (feedIds: number[]): Promise<AxiosResponse<Feed[]>> =>\n    api.post('/feeds/compare', { feedIds }),\n\n  // Получить статистику по кормам\n  getStats: (): Promise<AxiosResponse<FeedStats>> =>\n    api.get('/feeds/stats/overview'),\n};\n\n// API для расчетов\nexport const calculationsApi = {\n  // Рассчитать энергетическую потребность\n  calculateEnergyRequirement: (data: EnergyRequirementRequest): Promise<AxiosResponse<EnergyRequirementResponse>> =>\n    api.post('/calculations/energy-requirement', data),\n\n  // Сравнить корма для животного (с сохранением)\n  compareFeeds: (data: CompareFeedsRequest): Promise<AxiosResponse<FeedComparison & { comparison_id?: number }>> =>\n    api.post('/calculations/compare-feeds', data),\n\n  // Быстрое сравнение кормов (без сохранения животного)\n  compareFeedsQuick: (data: CompareFeedsRequest): Promise<AxiosResponse<FeedComparison>> =>\n    api.post('/calculations/compare-feeds-quick', data),\n\n  // Получить историю сравнений для животного\n  getComparisonsForAnimal: (animalId: number, params?: {\n    limit?: number;\n    offset?: number;\n  }): Promise<AxiosResponse<Comparison[]>> =>\n    api.get(`/calculations/comparisons/animal/${animalId}`, { params }),\n\n  // Получить конкретное сравнение по ID\n  getComparison: (id: number): Promise<AxiosResponse<Comparison>> =>\n    api.get(`/calculations/comparisons/${id}`),\n\n  // Рассчитать суточную норму корма\n  calculateDailyAmount: (data: {\n    energy_need: number;\n    feed_calories: number;\n  }): Promise<AxiosResponse<{\n    energy_need: number;\n    feed_calories: number;\n    daily_amount_grams: number;\n    daily_amount_cups: number;\n  }>> =>\n    api.post('/calculations/daily-amount', data),\n\n  // Рассчитать питательные вещества в суточной норме\n  calculateDailyNutrients: (data: {\n    daily_amount: number;\n    feed_nutrients: any;\n  }): Promise<AxiosResponse<{\n    daily_amount_grams: number;\n    daily_nutrients: any;\n  }>> =>\n    api.post('/calculations/daily-nutrients', data),\n\n  // Получить статистику расчетов\n  getStats: (): Promise<AxiosResponse<CalculationStats>> =>\n    api.get('/calculations/stats'),\n};\n\n// API для проверки здоровья сервера\nexport const healthApi = {\n  check: (): Promise<AxiosResponse<{ status: string; message: string }>> =>\n    api.get('/health'),\n};\n\n// Экспортируем основной экземпляр API\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}