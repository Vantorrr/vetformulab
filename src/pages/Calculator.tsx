import React, { useState, useEffect, useCallback } from 'react';
import config from '../config';

interface Feed {
  id: number;
  name: string;
  brand: string;
  type: string;
  metabolizable_energy: number;
  crude_protein: number;
  crude_fat: number;
  crude_fiber: number;
  moisture: number;
  calcium: number;
  phosphorus: number;
}

interface AnimalData {
  species: string;
  gender: string;
  age: number;
  condition: number;
  name: string;
  breed: string;
  status: string;
  activity: string;
  owner: string;
  currentWeight: number;
  targetWeight: number;
  adultWeight: number;
  lactationWeeks: number;
  contact: string;
  meCoefficient: number;
}

interface NutritionRequirements {
  proteinME: number;
  fatME: number;
  carbME: number;
  structure: {
    protein: number;
    fat: number;
    carbs: number;
    fiber: number;
  };
}

const Calculator: React.FC = () => {
  const [animalData, setAnimalData] = useState<AnimalData>({
    species: '—Å–æ–±–∞–∫–∞',
    gender: '—Å–∞–º–µ—Ü',
    age: 3.5,
    condition: 6,
    name: '–ö—É–ø–µ—Ä',
    breed: '–≤–æ–ª—å—à –∫–æ—Ä–≥–∏ –ø–µ–º–±—Ä–æ–∫',
    status: '–∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π',
    activity: '—Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –æ–∂–∏—Ä–µ–Ω–∏—é',
    owner: '',
    currentWeight: 14.6,
    targetWeight: 13.14,
    adultWeight: 13.14,
    lactationWeeks: 0,
    contact: '',
    meCoefficient: 1.0
  });

  const [energyNeed, setEnergyNeed] = useState<number>(621.14);
  const [nutritionReq, setNutritionReq] = useState<NutritionRequirements>({
    proteinME: 35,
    fatME: 25,
    carbME: 40,
    structure: {
      protein: 4,
      fat: 4,
      carbs: 4,
      fiber: 4
    }
  });

  const [diagnosis, setDiagnosis] = useState('');
  const [intolerances, setIntolerances] = useState('');
  
  const [feeds, setFeeds] = useState<Feed[]>([]);
  const [selectedFeed, setSelectedFeed] = useState<Feed | null>(null);
  const [dailyAmount, setDailyAmount] = useState<number>(0);

  // –î–æ–±–∞–≤–ª—è—é –µ–¥–∏–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –ø–æ–ª–µ–π
  const fieldStyle = {
    width: '100%',
    height: '48px',
    padding: '12px 16px',
    border: '2px solid #e2e8f0',
    borderRadius: '12px',
    fontSize: '14px',
    fontWeight: '500',
    background: '#ffffff',
    transition: 'all 0.2s ease',
    outline: 'none',
    appearance: 'none' as 'none',
    boxSizing: 'border-box' as 'border-box'
  };

  const focusStyle = {
    borderColor: '#00c851',
    boxShadow: '0 0 0 3px rgba(0, 200, 81, 0.1)'
  };

  const labelStyle = {
    fontSize: '12px',
    color: '#64748b',
    fontWeight: '500',
    marginTop: '4px',
    display: 'block'
  };

  // –†–∞—Å—á–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ —ç–Ω–µ—Ä–≥–∏–∏
  const calculateEnergyNeed = useCallback(() => {
    let rer = 70 * Math.pow(animalData.targetWeight, 0.75);
    
    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    let activityMultiplier = 1.0;
    
    if (animalData.status === '–∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π') {
      activityMultiplier = animalData.activity === '—Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –æ–∂–∏—Ä–µ–Ω–∏—é' ? 1.2 : 1.4;
    } else if (animalData.status === '–∏–Ω—Ç–∞–∫—Ç–Ω—ã–π') {
      activityMultiplier = 1.6;
    } else if (animalData.status === '–±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å 1-4 –Ω–µ–¥–µ–ª–∏') {
      activityMultiplier = 1.8;
    } else if (animalData.status === '–±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å >5 –Ω–µ–¥–µ–ª—å') {
      activityMultiplier = 2.0;
    } else if (animalData.status === '–ª–∞–∫—Ç–∞—Ü–∏—è') {
      activityMultiplier = 2.0 + (0.25 * animalData.lactationWeeks);
    }

    const totalEnergy = rer * activityMultiplier * animalData.meCoefficient;
    setEnergyNeed(Math.round(totalEnergy * 100) / 100);
  }, [animalData.targetWeight, animalData.status, animalData.activity, animalData.lactationWeeks, animalData.meCoefficient]);

  useEffect(() => {
    calculateEnergyNeed();
  }, [calculateEnergyNeed]);

  useEffect(() => {
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É—Ç–æ—á–Ω—É—é –Ω–æ—Ä–º—É –∫–æ—Ä–º–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
    if (selectedFeed && energyNeed > 0) {
      const dailyGrams = (energyNeed * 100) / selectedFeed.metabolizable_energy;
      setDailyAmount(dailyGrams);
    } else {
      setDailyAmount(0);
    }
  }, [energyNeed, selectedFeed]);

  useEffect(() => {
    fetchFeeds();
  }, []);

  const fetchFeeds = async () => {
    try {
      const response = await fetch(`${config.API_BASE_URL}${config.API_ENDPOINTS.feeds}/detailed`);
      const data = await response.json();
      if (data.success) {
        setFeeds(data.feeds);
      }
    } catch (error) {
      console.error('Error fetching feeds:', error);
    }
  };



  const handleInputChange = (field: keyof AnimalData, value: any) => {
    setAnimalData(prev => ({
      ...prev,
      [field]: value
    }));
  };



  const handleFeedSelection = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const feedId = parseInt(e.target.value);
    const feed = feeds.find(f => f.id === feedId);
    setSelectedFeed(feed || null);
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É—Ç–æ—á–Ω—É—é –Ω–æ—Ä–º—É –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ—Ä–º–∞
    if (feed && energyNeed > 0) {
      const dailyGrams = (energyNeed * 100) / feed.metabolizable_energy;
      setDailyAmount(dailyGrams);
    } else {
      setDailyAmount(0);
    }
  };

  return (
    <div style={{
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      padding: window.innerWidth <= 768 ? '10px' : '20px'
    }}>
      <div style={{
        maxWidth: '1400px',
        margin: '0 auto'
      }}>
        <div style={{
          textAlign: 'center',
          marginBottom: '30px'
        }}>
          <h1 style={{
            fontSize: window.innerWidth <= 768 ? '28px' : '36px',
            fontWeight: 'bold',
            background: 'linear-gradient(45deg, #00c851, #00ff88)',
            WebkitBackgroundClip: 'text',
            WebkitTextFillColor: 'transparent',
            marginBottom: '10px'
          }}>üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–∏—Ç–∞–Ω–∏—è</h1>
          <p style={{ 
            color: 'rgba(255, 255, 255, 0.8)', 
            fontSize: window.innerWidth <= 768 ? '14px' : '16px',
            textAlign: 'center',
            maxWidth: '600px',
            margin: '0 auto'
          }}>
            –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã –∫–æ—Ä–º–∞
          </p>
        </div>

        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',
          gap: '16px',
          marginBottom: '30px'
        }}>
          {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ */}
          <div 
            style={{
              background: 'rgba(255, 255, 255, 0.95)',
              padding: window.innerWidth <= 768 ? '16px' : '24px',
              borderRadius: '16px',
              boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)',
              backdropFilter: 'blur(10px)',
              transition: 'all 0.3s ease',
              cursor: 'default'
            }}
            onMouseEnter={(e) => {
              e.currentTarget.style.transform = 'translateY(-4px)';
              e.currentTarget.style.boxShadow = '0 12px 40px rgba(0, 0, 0, 0.15)';
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.transform = 'translateY(0)';
              e.currentTarget.style.boxShadow = '0 8px 32px rgba(0, 0, 0, 0.1)';
            }}
          >
            <h3 style={{ color: '#1a202c', marginBottom: '20px', fontSize: '18px', fontWeight: '600' }}>
              –î–∞–Ω–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
            </h3>
            <div style={{ display: 'grid', gap: '16px' }}>
              <div>
                <div style={{ position: 'relative' }}>
                  <select
                    value={animalData.species}
                    onChange={(e) => handleInputChange('species', e.target.value)}
                    style={{
                      ...fieldStyle,
                      paddingRight: '40px',
                      backgroundImage: `url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e")`,
                      backgroundPosition: 'right 12px center',
                      backgroundRepeat: 'no-repeat',
                      backgroundSize: '16px'
                    }}
                  >
                    <option value="—Å–æ–±–∞–∫–∞">üêï –°–æ–±–∞–∫–∞</option>
                    <option value="–∫–æ—à–∫–∞">üê± –ö–æ—à–∫–∞</option>
                    <option value="—Ö–æ—Ä–µ–∫">ü¶° –•–æ—Ä–µ–∫</option>
                  </select>
                </div>
                <label style={labelStyle}>–≤–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ</label>
              </div>

              <div>
                <div style={{ position: 'relative' }}>
                  <select
                    value={animalData.gender}
                    onChange={(e) => handleInputChange('gender', e.target.value)}
                    style={{
                      ...fieldStyle,
                      paddingRight: '40px',
                      backgroundImage: `url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e")`,
                      backgroundPosition: 'right 12px center',
                      backgroundRepeat: 'no-repeat',
                      backgroundSize: '16px'
                    }}
                  >
                    <option value="—Å–∞–º–µ—Ü">‚ôÇÔ∏è –°–∞–º–µ—Ü</option>
                    <option value="—Å–∞–º–∫–∞">‚ôÄÔ∏è –°–∞–º–∫–∞</option>
                  </select>
                </div>
                <label style={labelStyle}>–ø–æ–ª</label>
              </div>

              <div>
                <input
                  type="text"
                  value={animalData.breed}
                  onChange={(e) => handleInputChange('breed', e.target.value)}
                  style={fieldStyle}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–¥—É"
                  onFocus={(e) => Object.assign(e.target.style, focusStyle)}
                  onBlur={(e) => Object.assign(e.target.style, { borderColor: '#e2e8f0', boxShadow: 'none' })}
                />
                <label style={labelStyle}>–ø–æ—Ä–æ–¥–∞</label>
              </div>

              <div>
                <input
                  type="number"
                  step="0.1"
                  value={animalData.age}
                  onChange={(e) => handleInputChange('age', parseFloat(e.target.value))}
                  style={fieldStyle}
                  placeholder="0.0"
                  onFocus={(e) => Object.assign(e.target.style, focusStyle)}
                  onBlur={(e) => Object.assign(e.target.style, { borderColor: '#e2e8f0', boxShadow: 'none' })}
                />
                <label style={labelStyle}>–≤–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç)</label>
              </div>

              <div>
                <input
                  type="number"
                  min="1"
                  max="9"
                  value={animalData.condition}
                  onChange={(e) => handleInputChange('condition', parseInt(e.target.value))}
                  style={fieldStyle}
                  placeholder="1-9"
                  onFocus={(e) => Object.assign(e.target.style, focusStyle)}
                  onBlur={(e) => Object.assign(e.target.style, { borderColor: '#e2e8f0', boxShadow: 'none' })}
                />
                <label style={labelStyle}>–∫–æ–Ω–¥–∏—Ü–∏—è (1-9)</label>
              </div>

              <div>
                <input
                  type="text"
                  value={animalData.name}
                  onChange={(e) => handleInputChange('name', e.target.value)}
                  style={fieldStyle}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–ª–∏—á–∫—É"
                  onFocus={(e) => Object.assign(e.target.style, focusStyle)}
                  onBlur={(e) => Object.assign(e.target.style, { borderColor: '#e2e8f0', boxShadow: 'none' })}
                />
                <label style={labelStyle}>–∫–ª–∏—á–∫–∞</label>
              </div>

              <div>
                <div style={{ position: 'relative' }}>
                  <select
                    value={animalData.status}
                    onChange={(e) => handleInputChange('status', e.target.value)}
                    style={{
                      ...fieldStyle,
                      paddingRight: '40px',
                      backgroundImage: `url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e")`,
                      backgroundPosition: 'right 12px center',
                      backgroundRepeat: 'no-repeat',
                      backgroundSize: '16px'
                    }}
                  >
                    <option value="–∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π">‚úÇÔ∏è –ö–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π</option>
                    <option value="–∏–Ω—Ç–∞–∫—Ç–Ω—ã–π">üî∏ –ò–Ω—Ç–∞–∫—Ç–Ω—ã–π</option>
                    <option value="–±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å 1-4 –Ω–µ–¥–µ–ª–∏">ü§± –ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å 1-4 –Ω–µ–¥–µ–ª–∏</option>
                    <option value="–±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å >5 –Ω–µ–¥–µ–ª—å">ü§± –ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å {'>'}5 –Ω–µ–¥–µ–ª—å</option>
                    <option value="–ª–∞–∫—Ç–∞—Ü–∏—è">üçº –õ–∞–∫—Ç–∞—Ü–∏—è</option>
                  </select>
                </div>
                <label style={labelStyle}>—Å—Ç–∞—Ç—É—Å</label>
              </div>

              <div>
                <div style={{ position: 'relative' }}>
                  <select
                    value={animalData.activity}
                    onChange={(e) => handleInputChange('activity', e.target.value)}
                    style={{
                      ...fieldStyle,
                      paddingRight: '40px',
                      backgroundImage: `url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e")`,
                      backgroundPosition: 'right 12px center',
                      backgroundRepeat: 'no-repeat',
                      backgroundSize: '16px'
                    }}
                  >
                    <option value="—Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –æ–∂–∏—Ä–µ–Ω–∏—é">üò¥ –°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –æ–∂–∏—Ä–µ–Ω–∏—é</option>
                    <option value="–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å">üö∂ –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</option>
                    <option value="–≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å">üèÉ –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</option>
                  </select>
                </div>
                <label style={labelStyle}>–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</label>
              </div>

              <div>
                <input
                  type="text"
                  value={animalData.owner}
                  onChange={(e) => handleInputChange('owner', e.target.value)}
                  style={fieldStyle}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞"
                  onFocus={(e) => Object.assign(e.target.style, focusStyle)}
                  onBlur={(e) => Object.assign(e.target.style, { borderColor: '#e2e8f0', boxShadow: 'none' })}
                />
                <label style={labelStyle}>–≤–ª–∞–¥–µ–ª–µ—Ü</label>
              </div>
            </div>
          </div>

          {/* –°—Ä–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞ - –≤–µ—Å –∏ —Ä–∞—Å—á–µ—Ç—ã */}
          <div 
            style={{
              background: 'rgba(255, 255, 255, 0.95)',
              padding: window.innerWidth <= 768 ? '16px' : '24px',
              borderRadius: '16px',
              boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)',
              backdropFilter: 'blur(10px)',
              transition: 'all 0.3s ease',
              cursor: 'default'
            }}
            onMouseEnter={(e) => {
              e.currentTarget.style.transform = 'translateY(-4px)';
              e.currentTarget.style.boxShadow = '0 12px 40px rgba(0, 0, 0, 0.15)';
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.transform = 'translateY(0)';
              e.currentTarget.style.boxShadow = '0 8px 32px rgba(0, 0, 0, 0.1)';
            }}
          >
            <h3 style={{ color: '#1a202c', marginBottom: '20px', fontSize: '18px', fontWeight: '600' }}>
              üìè –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–µ—Å–∞
            </h3>
            
            <div style={{ display: 'grid', gap: '16px', marginBottom: '24px' }}>
              <div>
                <input
                  type="number"
                  step="0.1"
                  value={animalData.currentWeight}
                  onChange={(e) => handleInputChange('currentWeight', parseFloat(e.target.value))}
                  style={fieldStyle}
                  placeholder="0.0"
                  onFocus={(e) => Object.assign(e.target.style, focusStyle)}
                  onBlur={(e) => Object.assign(e.target.style, { borderColor: '#e2e8f0', boxShadow: 'none' })}
                />
                <label style={labelStyle}>—Ç–µ–∫—É—â–∏–π (–∫–≥)</label>
              </div>

              <div>
                <input
                  type="number"
                  step="0.1"
                  value={animalData.targetWeight}
                  onChange={(e) => handleInputChange('targetWeight', parseFloat(e.target.value))}
                  style={fieldStyle}
                  placeholder="0.0"
                  onFocus={(e) => Object.assign(e.target.style, focusStyle)}
                  onBlur={(e) => Object.assign(e.target.style, { borderColor: '#e2e8f0', boxShadow: 'none' })}
                />
                <label style={labelStyle}>—Ä–∞—Å—á–µ—Ç–Ω—ã–π (–∫–≥)</label>
              </div>

              <div>
                <input
                  type="number"
                  step="0.1"
                  value={animalData.adultWeight}
                  onChange={(e) => handleInputChange('adultWeight', parseFloat(e.target.value))}
                  style={fieldStyle}
                  placeholder="0.0"
                  onFocus={(e) => Object.assign(e.target.style, focusStyle)}
                  onBlur={(e) => Object.assign(e.target.style, { borderColor: '#e2e8f0', boxShadow: 'none' })}
                />
                <label style={labelStyle}>–≤–∑—Ä–æ—Å–ª—ã–π (–∫–≥)</label>
              </div>

              <div>
                <input
                  type="text"
                  value={animalData.contact}
                  onChange={(e) => handleInputChange('contact', e.target.value)}
                  style={fieldStyle}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç"
                  onFocus={(e) => Object.assign(e.target.style, focusStyle)}
                  onBlur={(e) => Object.assign(e.target.style, { borderColor: '#e2e8f0', boxShadow: 'none' })}
                />
                <label style={labelStyle}>–∫–æ–Ω—Ç–∞–∫—Ç</label>
              </div>

              <div>
                <input
                  type="number"
                  step="0.1"
                  value={animalData.meCoefficient}
                  onChange={(e) => handleInputChange('meCoefficient', parseFloat(e.target.value))}
                  style={fieldStyle}
                  placeholder="1.0"
                  onFocus={(e) => Object.assign(e.target.style, focusStyle)}
                  onBlur={(e) => Object.assign(e.target.style, { borderColor: '#e2e8f0', boxShadow: 'none' })}
                />
                <label style={labelStyle}>–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ú–≠</label>
              </div>
            </div>

            {/* –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ —ç–Ω–µ—Ä–≥–∏–∏ */}
            <div style={{
              background: 'linear-gradient(135deg, #ff9a8b 0%, #fad0c4 100%)',
              padding: '20px',
              borderRadius: '12px',
              textAlign: 'center',
              marginBottom: '16px'
            }}>
              <div style={{ fontSize: '14px', color: '#7c2d12', marginBottom: '4px' }}>
                –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –ú–≠, –∫–∫–∞–ª
              </div>
              <div style={{ fontSize: '32px', fontWeight: 'bold', color: '#7c2d12' }}>
                {energyNeed.toFixed(2)}
              </div>
            </div>

            <button
              onClick={() => {
                setAnimalData({
                  species: '—Å–æ–±–∞–∫–∞',
                  gender: '—Å–∞–º–µ—Ü',
                  breed: '',
                  age: 0,
                  condition: 5,
                  name: '',
                  status: '–∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π',
                  activity: '–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
                  owner: '',
                  currentWeight: 0,
                  targetWeight: 0,
                  adultWeight: 0,
                  lactationWeeks: 0,
                  contact: '',
                  meCoefficient: 1
                });
                setEnergyNeed(0);
                setSelectedFeed(null);
                setDailyAmount(0);
                setDiagnosis('');
                setIntolerances('');
              }}
              style={{
                width: '100%',
                height: '48px',
                background: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',
                color: 'white',
                border: 'none',
                borderRadius: '12px',
                fontSize: window.innerWidth <= 768 ? '13px' : '14px',
                fontWeight: '600',
                cursor: 'pointer',
                transition: 'all 0.3s ease',
                boxShadow: '0 4px 15px rgba(240, 147, 251, 0.3)'
              }}
              onMouseEnter={(e) => {
                const btn = e.target as HTMLButtonElement;
                btn.style.transform = 'translateY(-3px) scale(1.02)';
                btn.style.boxShadow = '0 8px 25px rgba(240, 147, 251, 0.4)';
                btn.style.background = 'linear-gradient(135deg, #f093fb 0%, #e74c3c 100%)';
              }}
              onMouseLeave={(e) => {
                const btn = e.target as HTMLButtonElement;
                btn.style.transform = 'translateY(0) scale(1)';
                btn.style.boxShadow = '0 4px 15px rgba(240, 147, 251, 0.3)';
                btn.style.background = 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)';
              }}
              onMouseDown={(e) => {
                const btn = e.target as HTMLButtonElement;
                btn.style.transform = 'translateY(-1px) scale(0.98)';
              }}
              onMouseUp={(e) => {
                const btn = e.target as HTMLButtonElement;
                btn.style.transform = 'translateY(-3px) scale(1.02)';
              }}
            >
              üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            </button>
          </div>

                  {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –≤—ã–±–æ—Ä –∫–æ—Ä–º–∞ */}
        <div 
          style={{
            background: 'rgba(255, 255, 255, 0.95)',
            padding: window.innerWidth <= 768 ? '16px' : '24px',
            borderRadius: '16px',
            boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)',
            backdropFilter: 'blur(10px)',
            transition: 'all 0.3s ease',
            cursor: 'default'
          }}
          onMouseEnter={(e) => {
            e.currentTarget.style.transform = 'translateY(-4px)';
            e.currentTarget.style.boxShadow = '0 12px 40px rgba(0, 0, 0, 0.15)';
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.transform = 'translateY(0)';
            e.currentTarget.style.boxShadow = '0 8px 32px rgba(0, 0, 0, 0.1)';
          }}
        >
            <h3 style={{ color: '#1a202c', marginBottom: '20px', fontSize: '18px', fontWeight: '600' }}>
              üçñ –í—ã–±–æ—Ä –∫–æ—Ä–º–∞
            </h3>
            
            <div style={{ marginBottom: '20px' }}>
              <div style={{ position: 'relative' }}>
                <select
                  value={selectedFeed?.id || ''}
                  onChange={handleFeedSelection}
                  style={{
                    ...fieldStyle,
                    paddingRight: '40px',
                    backgroundImage: `url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e")`,
                    backgroundPosition: 'right 12px center',
                    backgroundRepeat: 'no-repeat',
                    backgroundSize: '16px'
                  }}
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–º –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã</option>
                  {feeds.map((feed) => (
                    <option key={feed.id} value={feed.id}>
                      {feed.brand} - {feed.name}
                    </option>
                  ))}
                </select>
              </div>
              <label style={labelStyle}>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–º –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã</label>
            </div>

            <div style={{ display: 'grid', gap: '16px', marginBottom: '20px' }}>
              <div>
                <input
                  type="number"
                  value={nutritionReq.proteinME}
                  onChange={(e) => setNutritionReq(prev => ({ ...prev, proteinME: parseInt(e.target.value) }))}
                  style={fieldStyle}
                  placeholder="35"
                  onFocus={(e) => Object.assign(e.target.style, focusStyle)}
                  onBlur={(e) => Object.assign(e.target.style, { borderColor: '#e2e8f0', boxShadow: 'none' })}
                />
                <label style={labelStyle}>–ú–≠ –±–µ–ª–∫–∞, %</label>
              </div>

              <div>
                <input
                  type="number"
                  value={nutritionReq.fatME}
                  onChange={(e) => setNutritionReq(prev => ({ ...prev, fatME: parseInt(e.target.value) }))}
                  style={fieldStyle}
                  placeholder="25"
                  onFocus={(e) => Object.assign(e.target.style, focusStyle)}
                  onBlur={(e) => Object.assign(e.target.style, { borderColor: '#e2e8f0', boxShadow: 'none' })}
                />
                <label style={labelStyle}>–ú–≠ –∂–∏—Ä–∞, %</label>
              </div>

              <div>
                <input
                  type="number"
                  value={nutritionReq.carbME}
                  onChange={(e) => setNutritionReq(prev => ({ ...prev, carbME: parseInt(e.target.value) }))}
                  style={fieldStyle}
                  placeholder="40"
                  onFocus={(e) => Object.assign(e.target.style, focusStyle)}
                  onBlur={(e) => Object.assign(e.target.style, { borderColor: '#e2e8f0', boxShadow: 'none' })}
                />
                <label style={labelStyle}>–ú–≠ —É–≥–ª–µ–≤–æ–¥–æ–≤, %</label>
              </div>
            </div>

            <div style={{ display: 'grid', gap: '16px', marginBottom: '20px' }}>
              <div>
                <textarea
                  value={diagnosis}
                  onChange={(e) => setDiagnosis(e.target.value)}
                  style={{
                    ...fieldStyle,
                    height: '80px',
                    resize: 'vertical',
                    fontFamily: 'inherit'
                  }}
                  placeholder="–•—Ä–æ–Ω–∏—á–µ—Å–∫–∞—è —ç–Ω—Ç–µ—Ä–æ–ø–∞—Ç–∏—è..."
                  onFocus={(e) => Object.assign(e.target.style, focusStyle)}
                  onBlur={(e) => Object.assign(e.target.style, { borderColor: '#e2e8f0', boxShadow: 'none' })}
                />
                <label style={labelStyle}>–û—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–≥–Ω–æ–∑</label>
              </div>

              <div>
                <textarea
                  value={intolerances}
                  onChange={(e) => setIntolerances(e.target.value)}
                  style={{
                    ...fieldStyle,
                    height: '60px',
                    resize: 'vertical',
                    fontFamily: 'inherit'
                  }}
                  placeholder="–ê–ª–ª–µ—Ä–≥–∏–∏ –∏ –Ω–µ–ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç–∏..."
                  onFocus={(e) => Object.assign(e.target.style, focusStyle)}
                  onBlur={(e) => Object.assign(e.target.style, { borderColor: '#e2e8f0', boxShadow: 'none' })}
                />
                <label style={labelStyle}>–ù–µ–ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤</label>
              </div>
            </div>

            {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—Ä–º–∞ */}
            {selectedFeed && dailyAmount > 0 && (
              <div 
                style={{
                  background: 'linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)',
                  padding: window.innerWidth <= 768 ? '16px' : '20px',
                  borderRadius: '12px',
                  marginTop: '20px',
                  transition: 'all 0.3s ease',
                  cursor: 'pointer'
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.transform = 'scale(1.02)';
                  e.currentTarget.style.boxShadow = '0 8px 25px rgba(168, 237, 234, 0.3)';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.transform = 'scale(1)';
                  e.currentTarget.style.boxShadow = 'none';
                }}
              >
                <h4 style={{ color: '#1a202c', marginBottom: '16px', fontSize: '16px', fontWeight: '600' }}>
                  üìä –°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞
                </h4>
                
                <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '12px', marginBottom: '16px' }}>
                  <div style={{
                    background: 'rgba(255, 255, 255, 0.8)',
                    padding: '12px',
                    borderRadius: '8px',
                    textAlign: 'center'
                  }}>
                    <div style={{ fontSize: '20px', fontWeight: 'bold', color: '#1a202c' }}>
                      {dailyAmount.toFixed(0)} –≥
                    </div>
                    <div style={{ fontSize: '12px', color: '#64748b' }}>–≥—Ä–∞–º–º—ã –≤ –¥–µ–Ω—å</div>
                  </div>
                  
                  <div style={{
                    background: 'rgba(255, 255, 255, 0.8)',
                    padding: '12px',
                    borderRadius: '8px',
                    textAlign: 'center'
                  }}>
                    <div style={{ fontSize: '20px', fontWeight: 'bold', color: '#1a202c' }}>
                      {(dailyAmount / 120).toFixed(1)}
                    </div>
                    <div style={{ fontSize: '12px', color: '#64748b' }}>—á–∞—à–µ–∫ –≤ –¥–µ–Ω—å</div>
                  </div>
                </div>

                <div style={{ fontSize: '14px', color: '#64748b' }}>
                  <strong>{selectedFeed.brand} - {selectedFeed.name}</strong>
                  <br />
                  –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {selectedFeed.metabolizable_energy} –∫–∫–∞–ª/100–≥
                </div>
              </div>
            )}
          </div>
        </div>

      {/* –ü–æ–∫–∞–∑ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤ –≤ —Å—É—Ç–æ—á–Ω–æ–π –ø–æ—Ä—Ü–∏–∏ */}
      {selectedFeed && dailyAmount > 0 && (
        <div 
          style={{
            background: 'rgba(255, 255, 255, 0.95)',
            padding: window.innerWidth <= 768 ? '16px' : '24px',
            borderRadius: '16px',
            boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)',
            backdropFilter: 'blur(10px)',
            marginBottom: window.innerWidth <= 768 ? '20px' : '30px',
            transition: 'all 0.3s ease'
          }}
          onMouseEnter={(e) => {
            e.currentTarget.style.transform = 'translateY(-2px)';
            e.currentTarget.style.boxShadow = '0 12px 40px rgba(0, 0, 0, 0.15)';
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.transform = 'translateY(0)';
            e.currentTarget.style.boxShadow = '0 8px 32px rgba(0, 0, 0, 0.1)';
          }}
        >
          <h3 style={{ color: '#1a202c', marginBottom: '20px', fontSize: '18px', fontWeight: '600' }}>
            üß™ –ü–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞ –≤ —Å—É—Ç–æ—á–Ω–æ–π –ø–æ—Ä—Ü–∏–∏
          </h3>
          
          <div style={{ 
            display: 'grid', 
            gridTemplateColumns: window.innerWidth <= 768 ? 'repeat(auto-fit, minmax(150px, 1fr))' : 'repeat(auto-fit, minmax(200px, 1fr))', 
            gap: window.innerWidth <= 768 ? '12px' : '16px' 
          }}>
            <div 
              style={{
                background: 'linear-gradient(135deg, #ffeaa7 0%, #fab1a0 100%)',
                padding: window.innerWidth <= 768 ? '12px' : '16px',
                borderRadius: '12px',
                textAlign: 'center',
                transition: 'all 0.3s ease',
                cursor: 'pointer'
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.transform = 'translateY(-3px) scale(1.05)';
                e.currentTarget.style.boxShadow = '0 8px 25px rgba(255, 234, 167, 0.4)';
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.transform = 'translateY(0) scale(1)';
                e.currentTarget.style.boxShadow = 'none';
              }}
            >
              <div style={{ fontSize: '18px', fontWeight: 'bold', color: '#2d3436' }}>
                {((selectedFeed.crude_protein / 100) * dailyAmount).toFixed(1)} –≥
              </div>
              <div style={{ fontSize: '12px', color: '#636e72' }}>–ë–µ–ª–æ–∫</div>
            </div>

            <div 
              style={{
                background: 'linear-gradient(135deg, #fd79a8 0%, #fdcb6e 100%)',
                padding: window.innerWidth <= 768 ? '12px' : '16px',
                borderRadius: '12px',
                textAlign: 'center',
                transition: 'all 0.3s ease',
                cursor: 'pointer'
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.transform = 'translateY(-3px) scale(1.05)';
                e.currentTarget.style.boxShadow = '0 8px 25px rgba(253, 121, 168, 0.4)';
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.transform = 'translateY(0) scale(1)';
                e.currentTarget.style.boxShadow = 'none';
              }}
            >
              <div style={{ fontSize: '18px', fontWeight: 'bold', color: '#2d3436' }}>
                {((selectedFeed.crude_fat / 100) * dailyAmount).toFixed(1)} –≥
              </div>
              <div style={{ fontSize: '12px', color: '#636e72' }}>–ñ–∏—Ä</div>
            </div>

            <div 
              style={{
                background: 'linear-gradient(135deg, #74b9ff 0%, #0984e3 100%)',
                padding: window.innerWidth <= 768 ? '12px' : '16px',
                borderRadius: '12px',
                textAlign: 'center',
                transition: 'all 0.3s ease',
                cursor: 'pointer'
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.transform = 'translateY(-3px) scale(1.05)';
                e.currentTarget.style.boxShadow = '0 8px 25px rgba(116, 185, 255, 0.4)';
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.transform = 'translateY(0) scale(1)';
                e.currentTarget.style.boxShadow = 'none';
              }}
            >
              <div style={{ fontSize: '18px', fontWeight: 'bold', color: '#fff' }}>
                {((selectedFeed.crude_fiber / 100) * dailyAmount).toFixed(1)} –≥
              </div>
              <div style={{ fontSize: '12px', color: '#ddd' }}>–ö–ª–µ—Ç—á–∞—Ç–∫–∞</div>
            </div>

            <div 
              style={{
                background: 'linear-gradient(135deg, #55a3ff 0%, #003d82 100%)',
                padding: window.innerWidth <= 768 ? '12px' : '16px',
                borderRadius: '12px',
                textAlign: 'center',
                transition: 'all 0.3s ease',
                cursor: 'pointer'
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.transform = 'translateY(-3px) scale(1.05)';
                e.currentTarget.style.boxShadow = '0 8px 25px rgba(85, 163, 255, 0.4)';
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.transform = 'translateY(0) scale(1)';
                e.currentTarget.style.boxShadow = 'none';
              }}
            >
              <div style={{ fontSize: '18px', fontWeight: 'bold', color: '#fff' }}>
                {((selectedFeed.moisture / 100) * dailyAmount).toFixed(1)} –≥
              </div>
              <div style={{ fontSize: '12px', color: '#ddd' }}>–í–ª–∞–≥–∞</div>
            </div>
          </div>
        </div>
      )}


      </div>
    </div>
  );
};

export default Calculator; 